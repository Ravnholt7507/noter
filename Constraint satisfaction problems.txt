What is a constraint satisfaction problem?
    a constraint is a condition that must be met by a solution
    a constraint satisfaction problem is a problem in which a solution must satisfy a set of constraints
    constraints are found by describing the world(environment) in terms of variables and domains
    Example: schedule
        variables: time, room, instructor
        domains: time: 8:00-12:00, room: 1-10, instructor: 1-5
        constraints: time, room, instructor
    
    Example: map coloring
        variables: color
        domains: color: red, blue, green
        constraints: no two adjacent countries can have the same color
    
    unary constraints: a constraint that involves only one variable
    binary constraints: a constraint that involves two variables
    n-ary constraints: a constraint that involves n variables

consistency vs extensibility
    consistency: a solution must satisfy all constraints
    extensibility: a solution must satisfy all constraints, but it may be possible to add more constraints

what is naive backtracking:
    naive backtracking is a search algorithm that tries to find a solution by assigning values to variables one at a time
    it tries to assign a value to a variable and then tries to assign a value to the next variable
    if it cannot find a value that satisfies all constraints, it backtracks and tries a different value for the previous variable
    it continues to backtrack until it finds a solution or it runs out of values to try
    can be compared to a depth first search

Inference:
    deducing existing constraints, that follow from already known constraints that are already satisfied
        Example: map coloring
            variables: color
            domains: color: red, blue, green
            constraints: no two adjacent countries can have the same color
            inference: if a country has a red neighbor, it cannot be red
            inference: if a country has a blue neighbor, it cannot be blue
            inference: if a country has a green neighbor, it cannot be green
    
constraint network:
    one node for each variable 
    one arc for each constraint
    each arc connects the variables involved in the constraint
    an arc is arc consistent if the domain of the tail variable is a subset of the domain of the head variable
    the network is arc consistent if all arcs are arc consistent

enforcing arc consistency for one pair of variables:
    for each value in the tail variable's domain
        if there is no value in the head variable's domain that satisfies the constraint
            remove the value from the tail variable's domain
    if the tail variable's domain is empty
        return failure
    else
        return success

how to use inference?
    if a variable has only one value in its domain
        assign that value to the variable
        remove that value from the domains of all other variables that are connected to the variable
        repeat until no more variables have only one value in their domain

decomposition:
    breaking a problem into subproblems
    Example: map coloring
        variables: color
        domains: color: red, blue, green
        constraints: no two adjacent countries can have the same color
        decomposition: break the map into regions
        decomposition: break the regions into subregions
        decomposition: break the subregions into countries
        decomposition: break the countries into states

the acyclicCG algorithm explenation:
    obtain a directed tree from the network constrain graph, picking an arbitrary node as the root and directing the arcs from the root to the leaves
    order the variables topologically i.e., such that each vertex is ordered before its children

the acyclicCG algorithm:
    for each variable in the topological order
        if the variable has only one value in its domain
            assign that value to the variable
            remove that value from the domains of all other variables that are connected to the variable
        else
            for each value in the variable's domain
                if there is no value in the domains of the variables that are connected to the variable that satisfies the constraint
                    remove the value from the variable's domain
            if the variable's domain is empty
                return failure
    return success

    


